<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.property.mapper.UserMapper">

    <resultMap id="userResultMap" type="User">
        <id property="id" column="id" />
        <result property="mobile" column="mobile" />
        <result property="name" column="name" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="enabled" column="is_enabled" />
        <result property="phone" column="phone" />
        <result property="createTime" column="create_time" />
        <collection property="roles" ofType="com.property.pojo.Role">
            <id property="id" column="role_id" />
            <result property="name" column="role_name" />
            <result property="nameZh" column="name_zh" />
        </collection>
    </resultMap>

    <insert id="insertUserRole">
        INSERT INTO user_role (user_id, role_id) VALUES (#{userId}, #{roleId})
    </insert>

    <select id="loadUserByUsername" resultMap="userResultMap">
        SELECT user.*, role.id AS `role_id`, role.name AS role_name, role.name_zh
        FROM user LEFT JOIN user_role ON user.id = user_role.user_id
                    LEFT JOIN role ON role.`id` = user_role.`role_id`
        WHERE `username` = #{username}
    </select>
    
    <select id="isUsernameExists" resultType="boolean">
        SELECT COUNT(*) FROM user WHERE `username` = #{username}
    </select>

    <insert id="insertUser" parameterType="com.property.pojo.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user(name, username, password, phone) VALUES (#{name}, #{username}, #{password}, #{phone})
    </insert>

    <update id="updatePwd" statementType="PREPARED">
        UPDATE user SET password = #{newPwd} WHERE username = #{username}
    </update>

    <select id="getUserIdByUsername" parameterType="string" resultType="integer">
        SELECT id FROM user WHERE username = #{username}
    </select>

    <select id="getAdminsByPaging" parameterType="integer" resultMap="userResultMap">
        SELECT user.id, username, user.name, phone, user.create_time, is_enabled FROM user
        JOIN user_role ON user.id = user_role.user_id
        JOIN role ON user_role.role_id = role.id
        WHERE role.name = 'admin' ORDER BY user.id LIMIT #{OFFSET}, 10
    </select>

    <select id="getUsersByPaging" parameterType="integer" resultMap="userResultMap">
        SELECT user.id, username, user.name, phone, user.create_time, is_enabled FROM user
          JOIN user_role ON user.id = user_role.user_id
          JOIN role ON user_role.role_id = role.id
        WHERE role.name = 'user' ORDER BY user.id LIMIT #{OFFSET}, 10
    </select>

    <select id="getAllUsers" resultMap="userResultMap">
        SELECT user.id, username, user.name, phone, user.create_time, is_enabled FROM user
          JOIN user_role ON user.id = user_role.user_id
          JOIN role ON user_role.role_id = role.id
        WHERE role.name = 'user'
    </select>

    <select id="getAdminCount" resultType="integer">
        SELECT COUNT(*) FROM user
        JOIN user_role ON user.id = user_role.user_id
        JOIN role ON user_role.role_id = role.id
        WHERE role.name = 'admin'
    </select>

    <delete id="deleteUserRole" parameterType="integer">
        DELETE FROM user_role WHERE user_id = #{id}
    </delete>

    <delete id="deleteUser" parameterType="integer">
        DELETE FROM user WHERE id = #{id}
    </delete>
</mapper>